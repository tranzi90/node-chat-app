#!/usr/bin/env node

/**
 * Module dependencies.
 */
const http = require('http')
const socketIO = require('socket.io')
const app = require('../app')
const debug = require('debug')('node-chat-app:server')
const { generateMessage, generateLocationMessage } = require('./utils/message')
const { Users } = require('./utils/users')
const { isRealString } = require('./utils/validation')
/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)

/**
 * Create HTTP server.
 */

var server = http.createServer(app)
let io = socketIO(server)

let users = new Users()
let rooms = []

io.on('connection', function (socket) {
    socket.on('join', function (params) {
        socket.join(params.room || params.newRoom)

        if (isRealString(params.newRoom)) rooms.push(params.newRoom)

        users.addUser(socket.id, params.name, params.room || params.newRoom)
        io.to(params.room || params.newRoom).emit(
            'updateUserList',
            users.getUserList(params.room || params.newRoom)
        )
        socket.broadcast
            .to(params.room || params.newRoom)
            .emit(
                'newMessage',
                generateMessage('Admin', `${params.name} joined!`)
            )
    })

    socket.emit('newMessage', generateMessage('Admin', 'Welcome to chat app!'))

    socket.emit('updateRoomList', rooms)

    socket.on('createMessage', function (message, callback) {
        let user = users.getUser(socket.id)

        if (isRealString(message.text)) {
            io.to(user.room).emit(
                'newMessage',
                generateMessage(user.name, message.text)
            )
        }
        callback()
    })

    socket.on('createLocationMessage', (coords) => {
        let user = users.getUser(socket.id)
        io.to(user.room).emit(
            'newLocationMessage',
            generateLocationMessage(
                user.name,
                coords.latitude,
                coords.longitude
            )
        )
    })

    socket.on('leaveChat', function () {
        let user = users.removeUser(socket.id)

        io.to(user.room).emit('updateUserList', users.getUserList(user.room))
        io.to(user.room).emit(
            'newMessage',
            generateMessage('Admin', `${user.name} has left chat!`)
        )
    })
})
/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port)
server.on('error', onError)
server.on('listening', onListening)

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10)

    if (isNaN(port)) {
        // named pipe
        return val
    }

    if (port >= 0) {
        // port number
        return port
    }

    return false
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error
    }

    var bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges')
            process.exit(1)
            break
        case 'EADDRINUSE':
            console.error(bind + ' is already in use')
            process.exit(1)
            break
        default:
            throw error
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address()
    var bind = typeof addr === 'string' ? 'pipe ' + addr : 'port ' + addr.port
    debug('Listening on ' + bind)
}
